// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Policie_BE_2.Data;

#nullable disable

namespace Policie_BE_2.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241008131423_nova")]
    partial class nova
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Policie_BE_2.Models.BtsData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("BtsData");
                });

            modelBuilder.Entity("Policie_BE_2.Models.GpsData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Accuracy")
                        .HasColumnType("float");

                    b.Property<double?>("Altitude")
                        .HasColumnType("float");

                    b.Property<double?>("Bearing")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("GeoidHeight")
                        .HasColumnType("float");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SatInView")
                        .HasColumnType("int");

                    b.Property<int>("SatUsed")
                        .HasColumnType("int");

                    b.Property<double?>("Speed")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GpsData");
                });

            modelBuilder.Entity("Policie_BE_2.Models.BtsData", b =>
                {
                    b.OwnsMany("Policie_BE_2.Models.CellTower", "CellTowers", b1 =>
                        {
                            b1.Property<int>("BtsDataId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("CellId")
                                .HasColumnType("int");

                            b1.Property<int>("LocationAreaCode")
                                .HasColumnType("int");

                            b1.Property<int>("MobileCountryCode")
                                .HasColumnType("int");

                            b1.Property<int>("MobileNetworkCode")
                                .HasColumnType("int");

                            b1.Property<int>("PrimaryScramblingCode")
                                .HasColumnType("int");

                            b1.Property<string>("RadioType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Serving")
                                .HasColumnType("int");

                            b1.Property<int>("SignalStrength")
                                .HasColumnType("int");

                            b1.HasKey("BtsDataId", "Id");

                            b1.ToTable("CellTower");

                            b1.WithOwner()
                                .HasForeignKey("BtsDataId");
                        });

                    b.OwnsOne("Policie_BE_2.Models.Position", "Position", b1 =>
                        {
                            b1.Property<int>("BtsDataId")
                                .HasColumnType("int");

                            b1.Property<double>("Accuracy")
                                .HasColumnType("float");

                            b1.Property<double>("Altitude")
                                .HasColumnType("float");

                            b1.Property<double>("Heading")
                                .HasColumnType("float");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.Property<string>("Source")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Speed")
                                .HasColumnType("float");

                            b1.HasKey("BtsDataId");

                            b1.ToTable("BtsData");

                            b1.WithOwner()
                                .HasForeignKey("BtsDataId");
                        });

                    b.Navigation("CellTowers");

                    b.Navigation("Position")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
